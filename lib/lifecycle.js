'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _defaultProps = require('./defaultProps');

var _defaultProps2 = _interopRequireDefault(_defaultProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getDefaultProps: function getDefaultProps() {
    return _defaultProps2.default;
  },
  getInitialState: function getInitialState() {
    return {
      page: 0,
      pageSize: this.props.defaultPageSize || 10,
      sorting: this.props.defaultSorting,
      expandedRows: {},
      filtering: this.props.defaultFiltering
    };
  },
  getResolvedState: function getResolvedState(props, state) {
    var resolvedState = _extends({}, _utils2.default.compactObject(this.state), _utils2.default.compactObject(this.props), _utils2.default.compactObject(state), _utils2.default.compactObject(props));
    return resolvedState;
  },
  componentWillMount: function componentWillMount() {
    this.setStateWithData(this.getDataModel(this.getResolvedState()));
  },
  componentDidMount: function componentDidMount() {
    this.fireOnChange();
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextState) {
    var oldState = this.getResolvedState();
    var newState = this.getResolvedState(nextProps, nextState);

    if (oldState.defaultSorting !== newState.defaultSorting) {
      newState.sorting = newState.defaultSorting;
    }

    if (oldState.showFilters !== newState.showFilters || oldState.showFilters !== newState.showFilters) {
      newState.filtering = newState.defaultFiltering;
    }

    // Props that trigger a data update
    if (oldState.data !== newState.data || oldState.columns !== newState.columns || oldState.pivotBy !== newState.pivotBy || oldState.sorting !== newState.sorting || oldState.showFilters !== newState.showFilters || oldState.filtering !== newState.filtering) {
      this.setStateWithData(this.getDataModel(newState));
    }
  },
  setStateWithData: function setStateWithData(newState, cb) {
    var oldState = this.getResolvedState();
    var newResolvedState = this.getResolvedState({}, newState);
    var freezeWhenExpanded = newResolvedState.freezeWhenExpanded;

    // Default to unfrozen state

    newResolvedState.frozen = false;

    // If freezeWhenExpanded is set, check for frozen conditions
    if (freezeWhenExpanded) {
      // if any rows are expanded, freeze the existing data and sorting
      var keys = Object.keys(newResolvedState.expandedRows);
      for (var i = 0; i < keys.length; i++) {
        if (newResolvedState.expandedRows[keys[i]]) {
          newResolvedState.frozen = true;
          break;
        }
      }
    }

    // If the data isn't frozen and either the data or
    // sorting model has changed, update the data
    if (oldState.frozen && !newResolvedState.frozen || oldState.sorting !== newResolvedState.sorting || oldState.filtering !== newResolvedState.filtering || oldState.showFilters !== newResolvedState.showFilters || !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData) {
      // Handle collapseOnSortingChange & collapseOnDataChange
      if (oldState.sorting !== newResolvedState.sorting && this.props.collapseOnSortingChange || oldState.filtering !== newResolvedState.filtering || oldState.showFilters !== newResolvedState.showFilters || !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData && this.props.collapseOnDataChange) {
        newResolvedState.expandedRows = {};
      }

      Object.assign(newResolvedState, this.getSortedData(newResolvedState));
    }

    // Calculate pageSize all the time
    if (newResolvedState.sortedData) {
      newResolvedState.pages = newResolvedState.manual ? newResolvedState.pages : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize);
      newResolvedState.page = Math.max(newResolvedState.page >= newResolvedState.pages ? newResolvedState.pages - 1 : newResolvedState.page, 0);
    }

    return this.setState(newResolvedState, cb);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,